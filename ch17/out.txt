#include
&s)
&v,
(!n)
(!p)
(int
(n
(n++)
(n--)
(norse_gods
(p)
(p->prev
(p->prev)
(p->succ
(p->succ)
(p->value
(prev)
(res)
(succ)
*
*>(this);
*n)
*n);
*norse_gods
*p
*p)
*prev;
*res
*s
*succ;
++i)
//
0)
0;
3;
:
<
<<
<iostream>
<string>
=
==
>
Link
Link("Freia"));
Link("Odin"));
Link("Thor");
Link("Waleed"));
Link(const
Link::add(Link
Link::advance(int
Link::erase(Link
Link::find(const
Link::insert(Link
Thor
add(Link
advance(int
class
const
const;
const_cast<Link
cout
do
else
endl;
erase(Link
find(const
for
i
if
insert(Link
int
main()
n)
n->prev
n->succ
n;
namespace
new
next()
norse_gods
norse_gods->add(new
norse_gods->advance(i)->value
norse_gods->erase(res);
norse_gods->find("Odin");
norse_gods->insert(new
norse_gods->next());
norse_gods->value
nullptr)
nullptr,
nullptr;
p
p->prev->succ
p->prev;
p->succ->prev
p->succ;
p;
prev
prev->succ
prev;
previous()
prev{p},
private:
public:
return
s)
std;
string
succ
succ->prev
succ;
succ{s}
this;
using
value;
value{v},
while
{
}
};
TX77845
TX 77845
Tx  77845
Tx77845-5629
Tx 77845-5629
TX  77845-5629
